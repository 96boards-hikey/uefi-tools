#!/bin/bash
################################################################################
# Setup the tree for a new month
#
# The general idea is to
# 1) merge all the topic branches into the monthly tracking branch
# 2) also merge them to the internal monthly tracking branch
# 3) tag the monthly tracking branch with the latest -rc number
# 4) update the linaro-tracking branch that follows the monthly tracking branch
# 5) update the internal monthly tracking branch with all the internal topics.
################################################################################
source "`dirname $0`"/uefi-common
################################################################################
cd $UEFI_NEXT_GIT

function usage {
	echo "usage:"
	echo "    uefi-new-rc [--tag <value>] --no-new-branch"
	echo "        --tag <value>     Use this to over-ride the default tagging strategy"
	echo "                          The tag provided will be prefixed with \"linaro-uefi\""
	echo "        --no-new-branch   Use this to prevent from creating a new monthly tracking branch"
}

function merge_error {
	echo "********************************************************************************"
	echo "ERROR: Merge failed when merging $topic onto branch $branch"
	echo "       fix the merge problems, then 'git add' any files"
	echo "       before running "git commit -s" to complete the merge"
	echo "       Then, re-run this script."
	echo "********************************************************************************"
}

uefi_next_tag=$(uefi_next_next_rc)
uefi_next_internal_tag=$(uefi_next_internal_next_rc)

while [ "$1" != "" ]; do
	case $1 in
		"/h" | "/?" | "-?" | "-h" | "--help" )
			usage
			exit
			;;
		"-t" | "--tag" )
			shift
			echo "Using tag postfix: $1"
			uefi_next_tag="linaro-uefi-$1"
			uefi_next_internal_tag="linaro-uefi-internal-$1"
			;;
		"-n" | "--no-new-branch" )
			no_new_branch=true
			;;
		* )
			echo "unknown arg $1"
			usage
			exit 1
			;;
	esac
	shift
done

if [ "$no_new_branch" != "true" ];
then
	# First check if the current month's tracking branch exists
	branch=linaro-tracking-$(uefi_next_get_YYYYMM)
	curr=`git branch --list $branch`
	if [ "$curr" == "" ]; then
		echo "tracking branch $branch doesn't exist, so create it"
		git branch $branch master
	fi

	branch=linaro-internal-tracking-$(uefi_next_get_YYYYMM)
	curr=`git branch --list $branch`
	if [ "$curr" == "" ]; then
		echo "tracking branch $branch doesn't exist, so create it"
		git branch $branch master
	fi
fi

################################################################################
echo "--------------------------------------------------------------------------------"
echo "CONFIG"
echo "--------------------------------------------------------------------------------"
echo "Current Month Branch  $(uefi_next_current_month_branch)"
echo "Internal Month Branch $(uefi_next_internal_current_month_branch)"
echo "uefi-next dir         $UEFI_NEXT_GIT"
echo "Next RC tag           $uefi_next_tag"
echo "Next internal RC tag  $uefi_next_internal_tag"
echo "--------------------------------------------------------------------------------"

################################################################################
# First, merge all the topic branches that have changed into the monthly tracking branch
# I don't know how we tell "if it's changed", but I think merge takes care of it.
################################################################################

topics=(`git branch --list linaro-topic-* | sed "s/*//"`)

for topic in "${topics[@]}" ; do

	# update monthly branch
	# Now that we have the topic branches, we merge them all back to the tracking branch
	echo "--------------------------------------------------------------------------------"
	echo "Merging $topic into $(uefi_next_current_month_branch)"
	branch=$(uefi_next_current_month_branch)
	git checkout $(uefi_next_current_month_branch)
	git merge $topic
	if [ "$?" == "0" ]; then
		echo "Merge succeeded"
	else
		merge_error
		exit
	fi
	git checkout $(uefi_next_internal_current_month_branch)
	git merge $topic
	if [ "$?" == "0" ]; then
		echo "Merge succeeded"
	else
		merge_error
		exit
	fi

done

################################################################################
################################################################################
# Now update the Private/Internal tree
################################################################################
################################################################################
git checkout $(uefi_next_internal_current_month_branch)

topics=(`git branch --list linaro-internal-topic-* | sed "s/*//"`)

for topic in "${topics[@]}" ; do

	# update monthly branch
	# Now that we have the topic branches, we merge them all back to the tracking branch
	echo "--------------------------------------------------------------------------------"
	echo "Merging $topic into $(uefi_next_internal_current_month_branch)"
	git checkout $(uefi_next_internal_current_month_branch)
	git merge $topic
	if [ "$?" == "0" ]; then
		echo "Merge succeeded"
	else
		merge_error
		exit
	fi
done

# We *must* tag the internal tree first because of the way that the tag function
# reports the next -rc number.  That's a bug and should be fixed some time...
git checkout $(uefi_next_internal_current_month_branch)
git tag $uefi_next_internal_tag
force_update_branch $(uefi_next_internal_current_month_branch) linaro-internal-tracking

# Tag the latest merges
git checkout $(uefi_next_current_month_branch)
git tag $uefi_next_tag

# Update linaro-tracking
# Do a force merge to make sure there are no conflicts
# linaro-tracking should usually be identical to the latest monthly branch at the point of an -rc
force_update_branch $(uefi_next_current_month_branch) linaro-tracking

# re-create armlt-tracking to match linaro-tracking
git checkout linaro-tracking
git branch -D armlt-tracking
git branch armlt-tracking linaro-tracking

exit
################################################################################
