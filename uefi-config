#!/bin/bash
# Output character to the terminal to emulate the user configuring UEFI
# on a Versatile Express board.
#
# The user can then redirect the output of this script to automate configuring the board.
#
# eg:
#   uefi-config --image=uImage > /dev/ttyUSB0

UEFI_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
UEFI_CMDLINE="console=ttyAMA0,38400n8 root=/dev/mmcblk0p2 rootwait ro androidboot.console=ttyAMA0 mmci.fmax=12000000"

# define defaults
if [ "$UEFI_IMAGE" = "" ]
then
	UEFI_IMAGE="uImage"
fi
if [ "$UEFI_MMCI" = "" ]
then
	UEFI_MMCI="4000000"
fi
if [ "$UEFI_GLOBAL_FDT" = "" ]
then
	use_fdt="a"
fi
if [ "$UEFI_BOOTMENU" = "" ]
then
	UEFI_BOOTMENU=3
fi
if [ "$UEFI_REMOVE_COUNT" = "" ]
then
	UEFI_REMOVE_COUNT=1
fi

function set_title
{
	if [ "$UEFI_TITLE" = "" ]
	then
		UEFI_TITLE="$UEFI_IMAGE"

		if [ "$use_fdt" = "a" ]
		then
			UEFI_TITLE="$UEFI_TITLE (ATAGS)"
		else
			if [ "$use_fdt" = "g" ]
			then
				UEFI_TITLE="$UEFI_TITLE (global FDT)"
			else
				UEFI_TITLE="$UEFI_TITLE (local FDT)"
			fi
		fi

		UEFI_TITLE="$UEFI_TITLE on SD card"
	#	echo "UEFI_TITLE=$UEFI_TITLE"
	fi
}

# over-ride any previous values with arguments passed to this script
function usage
{
    echo "Usage:"
	echo "    uefi-config"
    echo "        --cmdline|-c \"put cmdline in quotes\""
    echo "        --global-fdt <device tree blob filename>"
    echo "        --local-fdt <device tree blob filename>"
    echo "        --image <uImage filename>"
	echo "        --mmci <mmci speed>"
	echo "        --title \"put title in quotes\""
	echo "        --remove <number of current entries to remove>"
    echo ""
	echo "Example:"
	echo "    uefi-config --cmdline \"console ttyAMA0,384000\" --global-fdt v2p-ca9.dtb --image uImage --mmci 4000000 --title \"uImage\"   "
    echo ""
	echo "Most parameters can be abbreviated to their first letter:"
	echo "Example:"
	echo "    uefi-config -c \"console ttyAMA0,384000\" -g v2p-ca9.dtb -i uImage -m 4000000 -t \"uImage\"   "
	echo ""
	set_title
	echo "Current configuration:"
	echo "    UEFI_IMAGE         $UEFI_IMAGE"
	echo "    UEFI_MMCI          $UEFI_MMCI" 
	echo "    UEFI_GLOBAL_FDT    $UEFI_GLOBAL_FDT"
	echo "    UEFI_LOCAL_FDT     $UEFI_LOCAL_FDT"
	echo "    UEFI_CMDLINE       $UEFI_CMDLINE"
	echo "    UEFI_BOOTMENU      $UEFI_BOOTMENU"
	echo "    UEFI_REMOVE_COUNT  $UEFI_REMOVE_COUNT"
	echo "    UEFI_TITLE         $UEFI_TITLE"
	echo ""
	echo "You can set any of the above variables in your environment as defaults for this script."
	echo ""
	echo "Running this script with no additional arguments is the equivalent of this command:"
		if [ "$UEFI_GLOBAL_FDT" = "" ]
		then
			if [ "$UEFI_LOCAL_FDT" = "" ]
			then
				FDT_ARG=""
			else
				FDT_ARG="--local-fdt $UEFI_LOCAL_FDT"
			fi
		else
			FDT_ARG="--global-fdt $UEFI_GLOBAL_FDT"
		fi
	echo "    uefi-config --image $UEFI_IMAGE --mmci $UEFI_MMCI $FDT_ARG --title \"$UEFI_TITLE\" --remove $UEFI_REMOVE_COUNT --cmdline \"$UEFI_CMDLINE\"  "
}


while [ "$1" != "" ]; do
    case $1 in
        -b | --bootmenu )
            shift
            UEFI_BOOTMENU="$1"
            ;;
        -c | --cmdline )
            shift
            UEFI_CMDLINE="$1"
            ;;
        -g | --global-fdt )
            shift
			use_fdt="g"
            UEFI_GLOBAL_FDT=$1
            ;;
        -l | --localfdt )
            shift
			use_fdt="l"
            UEFI_LOCAL_FDT="$1\n"
            ;;
        -i | --image )
            shift
            UEFI_IMAGE=$1
            ;;
        -m | --mmci )
            shift
            UEFI_MMCI=$1
            ;;
        -r | --remove )
            shift
            UEFI_REMOVE_COUNT=$1
            ;;
        -t | --title )
            shift
            UEFI_TITLE=$1
            ;;


        /h | /? | -? | -h | --help )
            usage
            exit
            ;;
        * )
            usage
			echo "unknown arg $1"
            exit 1
    esac
    shift
done

set_title


# This assumes that we're sat at the top level menu in UEFI before script runs
################################################################################
# Enter the Boot Menu
echo "$UEFI_BOOTMENU" | slowuart

# Remove some boot options
###### TODO - this should be a loop!!!!
for (( i=0; i<$UEFI_REMOVE_COUNT; i++ ))
do
	echo "3" | slowuart
	echo "#1" | slowuart
done

# Add a new boot option
# It's important to run sed in the right order so that the constants are resolved fully
sed s/KERNEL_UIMAGE/$UEFI_IMAGE/ $UEFI_PATH/uefi-base-config-commands | sed "s/TITLE/$UEFI_TITLE/" | sed "s%KERNEL_CMDLINE%$UEFI_CMDLINE%" | sed s/MMCI_FREQ/$UEFI_MMCI/ | sed "s/HAS_FDT/$use_fdt/" | sed "s/LOCAL_FDT /$UEFI_LOCAL_FDT/" | slowuart

# Add the device tree config
if [ "$use_fdt" = "g" ]
then
	sed s/FDT_NAME/$UEFI_GLOBAL_FDT/ $UEFI_PATH/uefi-base-config-commands-add-fdt | slowuart
fi

# Drop back to the top level menu
echo "5" | slowuart
