# Build the aarch64 stuff from clean

WORKSPACE=/linaro/aarch64
KERNEL_PATH=$WORKSPACE/kernel.git
KERNEL_BRANCH=linux-linaro
BOOTWRAPPER_PATH=$WORKSPACE/boot-wrapper-aarch64.git
IMAGE_PATH_JUICE=$WORKSPACE/juice/`ls $WORKSPACE/juice | tail -1`
IMAGE_PATH_OE=/linaro/releases/oe/`ls linaro/releases/oe | tail -1`

# enable networking by default

export PATH=$PATH:$WORKSPACE/aarch64-toolchain/gcc-linaro-aarch64-linux-gnu-4.7+bzr115029-20121015+bzr2506_linux/bin

function clean_bootwrapper
{
	echo "Cleaning the bootwrapper... ($BOOTWRAPPER_PATH)"
	cd $BOOTWRAPPER_PATH
	git nuke
}

function clean_kernel
{
	echo "Cleaning the kernel... ($KERNEL_PATH, branch $KERNEL_BRANCH)"
	cd $KERNEL_PATH
	rm -rf out/$KERNEL_BRANCH
}

function clean_kernel_and_bootwrapper
{
	echo "Cleaning kernel and bootwrapper..."
	clean_bootwrapper
	clean_kernel
}

function juice_clean_image
{
	echo "Cleaning the image ($IMAGE_PATH_JUICE)"
	rm -rf $IMAGE_PATH_JUICE/boot
	rm -rf $IMAGE_PATH_JUICE/mmc.bin
}

function juice_build_image
{
	echo "Build the image... ($IMAGE_PATH_JUICE)"
	cd $IMAGE_PATH_JUICE
	tar jxvf boot.tar.bz2
	linaro-android-media-create --image_file mmc.bin --image_size 2000M --dev vexpress --system system.tar.bz2 --userdata userdata.tar.bz2 --boot boot.tar.bz2
}


function build_generic_aarch64_kernel
{
	echo "Build the OpenEmbedded kernel ... ($KERNEL_PATH)"
	cd $KERNEL_PATH
	git checkout $KERNEL_BRANCH
	mkdir -p out/$KERNEL_BRANCH
	ARCH=arm64 scripts/kconfig/merge_config.sh -O out/$KERNEL_BRANCH \
		linaro/configs/linaro-base.conf \
		linaro/configs/ubuntu-minimal.conf \
		linaro/configs/vexpress64.conf
	make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8 Image O=out/$KERNEL_BRANCH
}

function oe_build_kernel {
	build_generic_aarch64_kernel
}

function juice_build_kernel
{
	echo "Build the Juice kernel ... ($KERNEL_PATH)"
	cd $KERNEL_PATH
	git checkout $KERNEL_BRANCH
	mkdir -p out/$KERNEL_BRANCH
	make ARCH=arm64 defconfig vexpress-android_defconfig O=out/$KERNEL_BRANCH
	make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8 Image O=out/$KERNEL_BRANCH
}

function catalin_build_kernel
{
	echo "Build Catalin's kernel ... ($KERNEL_PATH)"
	cd $KERNEL_PATH
	git checkout $KERNEL_BRANCH
	mkdir -p out/$KERNEL_BRANCH
	make ARCH=arm64 defconfig vexpress_defconfig O=out/$KERNEL_BRANCH
	make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8 Image O=out/$KERNEL_BRANCH
}

function juice_build_bootwrapper
{
	echo "Build the bootwrapper... ($BOOTWRAPPER_PATH)"
	cd $BOOTWRAPPER_PATH
	git checkout master
	ln -sf $KERNEL_PATH/out/$KERNEL_BRANCH/scripts/dtc/dtc
	ln -sf $KERNEL_PATH/out/$KERNEL_BRANCH/arch/arm64/boot/Image
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/skeleton.dtsi
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/rtsm_ve-motherboard.dtsi
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/vexpress-v2m-rs1.dtsi
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/vexpress-v2p-aarch64.dts
	ln -sf $IMAGE_PATH_JUICE/boot/ramdisk.img filesystem.cpio.gz
	make CROSS_COMPILE=aarch64-linux-gnu- FDT_SRC=vexpress-v2p-aarch64.dts INITRD_FLAGS=-DUSE_INITRD
}

function oe_build_bootwrapper
{
	echo "Build the bootwrapper... ($BOOTWRAPPER_PATH)"
	cd $BOOTWRAPPER_PATH
	git checkout master

	ln -sf $KERNEL_PATH/out/$KERNEL_BRANCH/scripts/dtc/dtc
	ln -sf $KERNEL_PATH/out/$KERNEL_BRANCH/arch/arm64/boot/Image
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/skeleton.dtsi
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/vexpress-v2m-rs1.dtsi
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/vexpress-v2p-aarch64.dts
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/foundation-v8.dts

	make CROSS_COMPILE=aarch64-linux-gnu- BOOTARGS='"root=/dev/vda2 consolelog=9 rw console=ttyAMA0"' FDT_SRC=foundation-v8.dts IMAGE=linux-system-foundation.axf
}


function catalin_build_bootwrapper
{
	echo "Build the bootwrapper... ($BOOTWRAPPER_PATH)"
	cd $BOOTWRAPPER_PATH
	git checkout master

	ln -sf $KERNEL_PATH/out/$KERNEL_BRANCH/scripts/dtc/dtc
	ln -sf $KERNEL_PATH/out/$KERNEL_BRANCH/arch/arm64/boot/Image
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/skeleton.dtsi
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/rtsm_ve-motherboard.dtsi
	ln -sf $KERNEL_PATH/arch/arm64/boot/dts/rtsm_ve-aemv8a.dts

	make CROSS_COMPILE=aarch64-linux-gnu- BOOTARGS='"root=/dev/mmcblk0p2 rw console=ttyAMA0 ip=dhcp"' FDT_SRC=rtsm_ve-aemv8a.dts IMAGE=linux-system.axf
}

function juice_build_everything
{
	juice_build_image
	juice_build_kernel
	juice_build_bootwrapper
}

function oe_build_everything
{
	oe_build_kernel
	oe_build_bootwrapper
}

function juice_run_model_generic
{
	export PATH=$PATH:/linaro/fastmodels/RTSM_AEMv8/ModelDebugger_7.1/bin/
	model_shell64 \
		-a $BOOTWRAPPER_PATH/linux-system.axf \
		/linar/fastmodels/RTSM_AEMv8/lib/Linux64/RTSM_VE_AEMv8A.so \
		-C motherboard.mmc.p_mmc_file=$IMAGE_PATH_JUICE/mmc.bin
}

function juice_run_model_7_1_old
{
	/linaro/fastmodels/RTSM_AEMv8/ModelDebugger_7.1/bin/model_shell64 \
		-a $BOOTWRAPPER_PATH/linux-system.axf \
		/linaro/fastmodels/RTSM_AEMv8/lib/Linux64/RTSM_VE_AEMv8A.so \
		-C motherboard.mmc.p_mmc_file=$IMAGE_PATH_JUICE/mmc.bin
}

function juice_run_model_7_1
{
	RTSM_MODEL="/linaro/fastmodels/RTSM_AEMv8/ModelDebugger_7.1/bin/model_shell64 \
		-a $BOOTWRAPPER_PATH/linux-system.axf \
		/linaro/fastmodels/RTSM_AEMv8/lib/Linux64/RTSM_VE_AEMv8A.so"
	RTSM_UEFI=""
	RTSM_MODEL_VERSION="7.1"
	RTSM_MMC=$IMAGE_PATH_JUICE/mmc.bin

	run_rtsm
}

function juice_run_ve_model
{
	export PATH=$PATH:/linaro/fastmodels/RTSM_AEMv8_VE/bin
	model_shell64 \
		-a $BOOTWRAPPER_PATH/linux-system.axf \
		/linaro/fastmodels/RTSM_AEMv8_VE/models/Linux64_GCC-4.1/RTSM_VE_AEMv8A.so \
		-C motherboard.mmc.p_mmc_file=$IMAGE_PATH_JUICE/mmc.bin \
		$NETWORK_ARGS
}

function juice_run_ve_model_r0p3-46rel05
{
	export PATH=$PATH:/linaro/fastmodels/RTSM_AEMv8_VE_r0p3-46rel05/bin
	model_shell64 \
		-a $BOOTWRAPPER_PATH/linux-system.axf \
		/linaro/fastmodels/RTSM_AEMv8_VE_r0p3-46rel05/models/Linux64_GCC-4.1/RTSM_VE_AEMv8A.so \
		-C motherboard.mmc.p_mmc_file=$IMAGE_PATH_JUICE/mmc.bin \
		$NETWORK_ARGS
}

function juice_run_ve_model_r0p4-47rel02
{
	export PATH=$PATH:/linaro/fastmodels/RTSM_AEMv8_VE_r0p4-47rel02/bin
	model_shell64 \
		-a $BOOTWRAPPER_PATH/linux-system.axf \
		/linaro/fastmodels/RTSM_AEMv8_VE_r0p4-47rel02/models/Linux64_GCC-4.1/RTSM_VE_AEMv8A.so \
		-C motherboard.mmc.p_mmc_file=$IMAGE_PATH_JUICE/mmc.bin \
		$NETWORK_ARGS
}


function disable_networking
{
	NETWORK_ARGS=""
}

function enable_networking
{
	NETWORK_ARGS="\
        -C motherboard.hostbridge.interfaceName=ARM$USER \
        -C motherboard.smsc_91c111.enabled=true \
        -C motherboard.smsc_91c111.mac_address=00:02:f7:ef:67:e6"
}

function juice_run_ve_model_with_kernel_from_image
{
	# run the VE model with the kernel from the image
	RTSM_MODEL="/linaro/fastmodels/RTSM_AEMv8_VE/bin/model_shell64 \
		-a $IMAGE_PATH_JUICE/boot/linux-system.axf \
		/linaro/fastmodels/RTSM_AEMv8_VE/models/Linux64_GCC-4.1/RTSM_VE_AEMv8A.so"
	RTSM_MMC=$IMAGE_PATH_JUICE/mmc.bin \

	run_rtsm
}

function catalin_run_ve_model
{
	export PATH=$PATH:/linaro/fastmodels/RTSM_AEMv8_VE/bin

	model_shell64 \
		-a $BOOTWRAPPER_PATH/linux-system.axf \
		/linaro/fastmodels/RTSM_AEMv8_VE/models/Linux64_GCC-4.1/RTSM_VE_AEMv8A.so \
		-C motherboard.mmc.p_mmc_file=$IMAGE_PATH_OE \
		$NETWORK_ARGS
}

function oe_run_foundation
{
	/linaro/fastmodels/Foundation_v8pkg/Foundation_v8 \
		--image $BOOTWRAPPER_PATH/linux-system-foundation.axf \
		--block-device $IMAGE_PATH_OE \
		--network=nat
}


################################################################################
# Config functions
################################################################################
function juice_change_image_path
{
	echo "Change Juice image path..."
	images=(
		`ls $WORKSPACE/juice`
	)
	read -p "$(
			f=0
			for image in "${images[@]}" ; do
					echo "$((++f)): $image"
			done

			echo -ne '> '
	)" selection

	selected_image="${images[$((selection-1))]}"

	IMAGE_PATH_JUICE=$WORKSPACE/juice/$selected_image


}

function oe_change_image_path
{
	echo "Change OpenEmbedded image path..."
	images=(
		`find /linaro/releases/oe -name *.img -type f`
	)
	read -p "$(
			f=0
			for image in "${images[@]}" ; do
					echo "$((++f)): $image"
			done

			echo -ne '> '
	)" selection

	selected_image="${images[$((selection-1))]}"

	IMAGE_PATH_OE=$selected_image


}

function change_kernel_branch
{
	echo "Changing kernel branch..."
	cd $KERNEL_PATH
	branches=(
	`git branch | cut -c 3- | grep -v stgit`
	)

	read -p "$(
			f=0
			for branch in "${branches[@]}" ; do
					echo "$((++f)): $branch"
			done

			echo -ne '> '
	)" selection

	selected_branch="${branches[$((selection-1))]}"

	KERNEL_BRANCH=$selected_branch

}

function kernel_update_branches
{
	cd $KERNEL_PATH
	git remote update
	git checkout master
	git branch -f armlt armlt/integration-linux-vexpress
	git branch -f linux-linaro linux-linaro/linux-linaro
	git branch -f soc-armv8-model catalin/soc-armv8-model

	git branch -f integration-android-vexpress armlt/integration-android-vexpress
	git branch -f integration-linaro-vexpress armlt/integration-linaro-vexpress
	git branch -f integration-linux-vexpress armlt/integration-linux-vexpress
	git branch -f tracking-armlt-arm64 armlt/tracking-armlt-arm64
	git branch -f linux-linaro-tracking-with-fixes linux-linaro-tracking-with-fixes/master
}

function show_config
{
	echo "---------------------------------------------"
	echo "Environment Variables"
	echo "---------------------------------------------"
	echo "WORKSPACE         $WORKSPACE"
	echo "KERNEL_PATH       $KERNEL_PATH"
	echo "KERNEL_BRANCH     $KERNEL_BRANCH"
	echo "BOOTWRAPPER_PATH  $BOOTWRAPPER_PATH"
	echo "IMAGE_PATH_JUICE  $IMAGE_PATH_JUICE"
	echo "IMAGE_PATH_OE     $IMAGE_PATH_OE"
	if [ "$NETWORK_ARGS" == "" ]
	then
	echo "NETWORK           DISABLED"
	else
	echo "NETWORK           ENABLED"
	fi
}

function change_config
{
	echo "Changing config..."
	configs=(
		show_config
		juice_change_image_path
		oe_change_image_path
		change_kernel_branch
	)
while true
do
	echo "--------------------------------------------------------------------------------"
	echo "Config options"
	echo "--------------------------------------------------------------------------------"
	read -p "$(
			f=0
			for config in "${configs[@]}" ; do
					echo "$((f++)): $config"
			done

			echo ""
			echo "b: back"
			echo "q: quit"
			echo -ne '> '
	)" selection

	selected_config="${configs[$((selection))]}"

	case $selection in
		"" | "b" )
			break
			;;
		"q" ) echo "quitting without doing anything..."
			exit
			;;
		*) $selected_config
			;;
	esac
done
	echo "Saving config..."
	echo "export KERNEL_BRANCH=$KERNEL_BRANCH" > $WORKSPACE/.menu
	echo "export IMAGE_PATH_JUICE=$IMAGE_PATH_JUICE" >> $WORKSPACE/.menu
	echo "export IMAGE_PATH_OE=$IMAGE_PATH_OE" >> $WORKSPACE/.menu
}

################################################################################
# Run the main menu system
################################################################################

if [ -e $WORKSPACE/.menu ]
then
	echo "Loading stored config..."
	source $WORKSPACE/.menu
fi

armv8=(
	clean_kernel_and_bootwrapper
	clean_bootwrapper
	clean_kernel

	separator

	juice_clean_image
	juice_build_everything
	juice_build_image
	juice_build_kernel
	juice_build_bootwrapper

	separator

	juice_run_model_7_1
	juice_run_ve_model
	juice_run_ve_model_r0p3-46rel05
	juice_run_ve_model_r0p4-47rel02
	juice_run_ve_model_with_kernel_from_image

	separator

	oe_build_everything
	oe_build_kernel
	oe_build_bootwrapper
	oe_run_foundation

	separator

	catalin_build_kernel
	catalin_build_bootwrapper
	catalin_run_ve_model

	separator

	build_generic_aarch64_kernel

	separator

	enable_networking
	disable_networking

	separator

	kernel_update_branches

	separator

	setup_flexlm_tunnel

	separator

	show_config
	change_config
)


MENU=armv8
TITLE_armv8="ARMv8 hacking"

source rtsm_common

