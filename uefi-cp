#!/bin/bash


################################################################################
# Usage
################################################################################
function usage
{
    echo "Usage:"
	echo "    uefi-cp"
	echo "        --eject"
    echo "        --board [VEXPRESS01|VEXPRESS02]"
    echo "        --coretile [A5|A9|TC1|TC2]"
	echo "        --image <filename>"
    echo ""
	echo "Example:"
	echo "    uefi-cp --board VEXPRESS01 --coretile TC2 --image ./Build/ArmVExpress-CTA15-A7/DEBUG_ARMLINUXGCC/FV/ARM_VEXPRESS_CTA15A7_EFI.fd"
	echo ""
}


################################################################################
# Parse command line parameters
################################################################################
while [ "$1" != "" ]; do
    case $1 in
        -b | --board )
            shift
            UEFI_BOARD="$1"
            ;;
        -c | --coretile )
            shift
            UEFI_CORETILE="$1"
            ;;
		-e | --eject )
			eject=1
			;;
        -i | --image )
            shift
            UEFI_IMAGE=$1
            ;;

        /h | /? | -? | -h | --help )
            usage
            exit
            ;;
        * )
            usage
			echo "unknown arg $1"
            exit 1
    esac
    shift
done


################################################################################
# Select image to copy to the board
################################################################################
if [ -z "$UEFI_IMAGE" ]
then
	images=(
		`find . -name "*.fd"`
	)

	read -p "$(
			f=0
			for image in "${images[@]}" ; do
					echo "$((f++)): $image"
			done

			echo ""
			echo "q: quit"
			echo -ne '> '
	)" selection
	selected_image="${images[$((selection))]}"

	case $selection in
		Quit) break
			;;
		"" | "q" ) echo "quitting without doing anything..."
			;;
		*) 
			if [ -z "$selected_image" ]
			then
				echo "invalid selection"
			else
				echo selected $selected_image
				UEFI_IMAGE="$selected_image"
			fi
			;;
	esac
fi

if [ -z "$UEFI_BOARD" ]
then
	boards=(
		"VEXPRESS01"
		"VEXPRESS02"
		`ls /media | grep -v VEXPRESS01 | grep -v VEXPRESS02 | grep VE`
	)

	read -p "$(
			f=0
			for board in "${boards[@]}" ; do
					echo "$((f++)): $board"
			done

			echo ""
			echo "q: quit"
			echo -ne '> '
	)" selection
	selected_board="${boards[$((selection))]}"

	case $selection in
		Quit) break
			;;
		"" | "q" ) echo "quitting without doing anything..."
			;;
		*) 
			if [ -z "$selected_board" ]
			then
				echo "invalid selection"
			else
				echo selected $selected_board
				UEFI_BOARD="$selected_board"
			fi
			;;
	esac
fi

if [ -z "$UEFI_CORETILE" ]
then
	coretiles=(
		"A5"
		"A9"
		"TC1"
		"TC2"
	)

	read -p "$(
			f=0
			for coretile in "${coretiles[@]}" ; do
					echo "$((f++)): $coretile"
			done

			echo ""
			echo "q: quit"
			echo -ne '> '
	)" selection
	selected_coretile="${coretiles[$((selection))]}"

	case $selection in
		Quit) break
			;;
		"" | "q" ) echo "quitting without doing anything..."
			;;
		*) 
			if [ -z "$selected_coretile" ]
			then
				echo "invalid selection"
			else
				echo selected $selected_coretile
				UEFI_CORETILE="$selected_coretile"
			fi
			;;
	esac
fi

echo "UEFI_IMAGE      $UEFI_IMAGE"
echo "UEFI_CORETILE   $UEFI_CORETILE"
echo "UEFI_BOARD      $UEFI_BOARD"
echo "cp $UEFI_IMAGE /media/$UEFI_BOARD/SOFTWARE/$UEFI_CORETILE/uefi.bin"
cp $UEFI_IMAGE /media/$UEFI_BOARD/SOFTWARE/$UEFI_CORETILE/uefi.bin

if [ "$eject" == "1" ]
then
	echo "eject /media/$UEFI_BOARD"
	eject /media/$UEFI_BOARD
fi

